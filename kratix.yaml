apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
    control-plane: controller-manager
  name: kratix-platform-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: bucketstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: BucketStateStore
    listKind: BucketStateStoreList
    plural: bucketstatestores
    singular: bucketstatestore
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BucketStateStore is the Schema for the bucketstatestores API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: BucketStateStoreSpec defines the desired state of BucketStateStore
            properties:
              authMethod:
                default: accessKey
                description: |-
                  Authentication method used to access the StateStore.
                  Default to accessKey; options are accessKey and IAM.
                enum:
                - accessKey
                - IAM
                type: string
              bucketName:
                description: Name of the bucket; required field.
                type: string
              endpoint:
                description: |-
                  Endpoint to access the bucket.
                  Required field.
                type: string
              insecure:
                description: Toggle to turn off or on SSL verification when connecting
                  to the bucket.
                type: boolean
              path:
                description: |-
                  Path within the StateStore to write documents. This path should be allocated
                  to Kratix as it will create, update, and delete files within this path.
                  Path structure begins with provided path and ends with namespaced destination name:
                    <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
                x-kubernetes-map-type: atomic
            required:
            - bucketName
            - endpoint
            type: object
          status:
            description: BucketStateStoreStatus defines the observed state of BucketStateStore
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: destinations.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: Destination
    listKind: DestinationList
    plural: destinations
    singular: destination
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Destination is the Schema for the Destinations API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DestinationSpec defines the desired state of Destination
            properties:
              filepath:
                default:
                  mode: nestedByMetadata
                description: The filepath mode to use when writing files to the destination.
                properties:
                  mode:
                    description: |-
                      filepath.mode can be set to either:
                      - nestedByMetadata (default): files from the pipeline will be placed in a nested directory structure
                      - none: file from the pipeline will be placed in a flat directory structure
                      filepath.mode is immutable
                    enum:
                    - nestedByMetadata
                    - none
                    type: string
                    x-kubernetes-validations:
                    - message: filepath.mode is immutable
                      rule: self == oldSelf
                type: object
              path:
                description: |-
                  Path within the StateStore to write documents. This path should be allocated
                  to Kratix as it will create, update, and delete files within this path.
                  Path structure begins with provided path and ends with namespaced destination name:
                    <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              stateStoreRef:
                description: StateStoreReference is a reference to a StateStore
                properties:
                  kind:
                    enum:
                    - BucketStateStore
                    - GitStateStore
                    type: string
                  name:
                    type: string
                required:
                - kind
                - name
                type: object
              strictMatchLabels:
                description: |-
                  By default, Kratix will schedule works without labels to all destinations
                  (for promise dependencies) or to a random destination (for resource
                  requests). If StrictMatchLabels is true, Kratix will only schedule works
                  to this destination if it can be selected by the Promise's
                  destinationSelectors. An empty label set on the work won't be scheduled
                  to this destination, unless the destination label set is also empty
                type: boolean
            type: object
          status:
            description: DestinationStatus defines the observed state of Destination
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: gitstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: GitStateStore
    listKind: GitStateStoreList
    plural: gitstatestores
    singular: gitstatestore
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitStateStore is the Schema for the gitstatestores API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: GitStateStoreSpec defines the desired state of GitStateStore
            properties:
              authMethod:
                default: basicAuth
                description: |-
                  Authentication method used to access the StateStore.
                  Default to basicAuth; options are basicAuth and ssh.
                enum:
                - basicAuth
                - ssh
                type: string
              branch:
                default: main
                description: Branch of the git repository; default to main.
                type: string
              gitAuthor:
                default:
                  name: kratix
                description: Git author name and email used to commit this git state
                  store; name defaults to 'kratix'
                properties:
                  email:
                    type: string
                  name:
                    type: string
                type: object
              path:
                description: |-
                  Path within the StateStore to write documents. This path should be allocated
                  to Kratix as it will create, update, and delete files within this path.
                  Path structure begins with provided path and ends with namespaced destination name:
                    <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                type: string
              secretRef:
                description: SecretRef specifies the Secret containing authentication
                  credentials
                properties:
                  name:
                    description: name is unique within a namespace to reference a
                      secret resource.
                    type: string
                  namespace:
                    description: namespace defines the space within which the secret
                      name must be unique.
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              url:
                description: URL of the git repository.
                type: string
            type: object
          status:
            description: GitStateStoreStatus defines the observed state of GitStateStore
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: promisereleases.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: PromiseRelease
    listKind: PromiseReleaseList
    plural: promisereleases
    singular: promiserelease
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.status
      name: Status
      type: string
    - jsonPath: .spec.version
      name: Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PromiseRelease is the Schema for the promisereleases API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PromiseReleaseSpec defines the desired state of PromiseRelease
            properties:
              sourceRef:
                default:
                  type: http
                properties:
                  secretRef:
                    description: |-
                      Reference a secret with credentials to access the source.
                      For more details on the secret format, see the documentation:
                        https://docs.kratix.io/main/reference/promises/releases#promise-release
                    properties:
                      name:
                        description: name is unique within a namespace to reference
                          a secret resource.
                        type: string
                      namespace:
                        description: namespace defines the space within which the
                          secret name must be unique.
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  type:
                    enum:
                    - http
                    type: string
                  url:
                    type: string
                required:
                - type
                type: object
              version:
                type: string
            required:
            - sourceRef
            type: object
          status:
            description: PromiseReleaseStatus defines the observed state of PromiseRelease
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              status:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kratix-platform-system/kratix-platform-serving-cert
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: promises.platform.kratix.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: kratix-platform-webhook-service
          namespace: kratix-platform-system
          path: /convert
      conversionReviewVersions:
      - v1alpha1
      - v1beta1
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: Promise
    listKind: PromiseList
    plural: promises
    singular: promise
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.status
      name: Status
      type: string
    - jsonPath: .status.kind
      name: Kind
      type: string
    - jsonPath: .status.apiVersion
      name: API Version
      type: string
    - jsonPath: .status.version
      name: Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Promise is the Schema for the promises API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: PromiseSpec defines the desired state of Promise
            properties:
              api:
                type: object
                x-kubernetes-embedded-resource: true
                x-kubernetes-preserve-unknown-fields: true
              dependencies:
                items:
                  description: Resources represents the manifest workload to be deployed
                    on Destinations
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              destinationSelectors:
                items:
                  description: For Promise spec
                  properties:
                    matchLabels:
                      additionalProperties:
                        type: string
                      type: object
                  type: object
                type: array
              requiredPromises:
                items:
                  properties:
                    name:
                      description: Name of Promise
                      type: string
                    version:
                      description: Version of Promise
                      type: string
                  type: object
                type: array
              workflows:
                properties:
                  promise:
                    properties:
                      configure:
                        items:
                          type: object
                        type: array
                        x-kubernetes-preserve-unknown-fields: true
                      delete:
                        items:
                          type: object
                        type: array
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                  resource:
                    properties:
                      configure:
                        items:
                          type: object
                        type: array
                        x-kubernetes-preserve-unknown-fields: true
                      delete:
                        items:
                          type: object
                        type: array
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                type: object
            type: object
          status:
            description: PromiseStatus defines the observed state of Promise
            properties:
              apiVersion:
                type: string
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              kind:
                type: string
              observedGeneration:
                format: int64
                type: integer
              requiredBy:
                items:
                  properties:
                    promise:
                      properties:
                        name:
                          type: string
                        version:
                          type: string
                      type: object
                    requiredVersion:
                      type: string
                  type: object
                type: array
              requiredPromises:
                items:
                  properties:
                    name:
                      type: string
                    state:
                      type: string
                    version:
                      type: string
                  type: object
                type: array
              status:
                type: string
              version:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: workplacements.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: WorkPlacement
    listKind: WorkPlacementList
    plural: workplacements
    singular: workplacement
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: WorkPlacement is the Schema for the workplacements API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: WorkPlacementSpec defines the desired state of WorkPlacement
            properties:
              id:
                type: string
              promiseName:
                type: string
              resourceName:
                type: string
              targetDestinationName:
                type: string
              workloads:
                description: |-
                  List of Workloads scheduled to target Destination;
                  Each Workload details name of the filepath on Destination,
                  and the compressed content of the workload.
                items:
                  description: Workload represents the manifest workload to be deployed
                    on destination
                  properties:
                    content:
                      description: Content of the workload, which is base64 encoded
                        and compressed with gzip.
                      type: string
                    filepath:
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: WorkPlacementStatus defines the observed state of WorkPlacement
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              versionID:
                description: |-
                  VersionID contains the version identifier of the last applied workplacement
                  For Git StateStores, this is the SHA of the last applied commit
                  For Bucket StateStores, this is always empty
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: works.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
    - kratix
    kind: Work
    listKind: WorkList
    plural: works
    singular: work
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Work is the Schema for the works API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: WorkSpec defines the desired state of Work
            properties:
              promiseName:
                type: string
              resourceName:
                type: string
              workloadGroups:
                description: Workload represents the manifest workload to be deployed
                  on destination
                items:
                  description: |-
                    WorkloadGroup represents the workloads in a particular directory that should
                    be scheduled to a Destination
                  properties:
                    destinationSelectors:
                      items:
                        properties:
                          matchLabels:
                            additionalProperties:
                              type: string
                            type: object
                          source:
                            type: string
                        type: object
                      type: array
                    directory:
                      type: string
                    id:
                      type: string
                    workloads:
                      description: |-
                        List of Workloads scheduled to target Destination;
                        Each Workload details name of the filepath on Destination,
                        and the compressed content of the workload.
                      items:
                        description: Workload represents the manifest workload to
                          be deployed on destination
                        properties:
                          content:
                            description: Content of the workload, which is base64
                              encoded and compressed with gzip.
                            type: string
                          filepath:
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: WorkStatus defines the observed state of Work
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-leader-election-role
  namespace: kratix-platform-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - bucketstatestores
  - gitstatestores
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - destinations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - destinations/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - destinations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promisereleases
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - promisereleases/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promisereleases/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promises
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - promises/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - promises/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - workplacements/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - works
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - platform.kratix.io
  resources:
  - works/finalizers
  verbs:
  - update
- apiGroups:
  - platform.kratix.io
  resources:
  - works/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-leader-election-rolebinding
  namespace: kratix-platform-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kratix-platform-leader-election-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kratix-platform-manager-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kratix-platform-proxy-role
subjects:
- kind: ServiceAccount
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
---
apiVersion: v1
data:
  WC_IMG: syntasso.docker.scarf.sh/syntasso/kratix-platform-pipeline-adapter@sha256:dcc03d1dbd73f258ec2e4991cfbda0b50f8393c4f8328479af6a909173b10e2a
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-wc-img-config
  namespace: kratix-platform-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
    control-plane: controller-manager
  name: kratix-platform-controller-manager-metrics-service
  namespace: kratix-platform-system
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: kratix
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-webhook-service
  namespace: kratix-platform-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
    control-plane: controller-manager
  name: kratix-platform-controller-manager
  namespace: kratix-platform-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: kratix-manager
      app.kubernetes.io/instance: kratix-platform
      app.kubernetes.io/part-of: kratix
      control-plane: controller-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kratix-manager
        app.kubernetes.io/instance: kratix-platform
        app.kubernetes.io/part-of: kratix
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: WC_IMG
          valueFrom:
            configMapKeyRef:
              key: WC_IMG
              name: kratix-platform-wc-img-config
        image: syntasso.docker.scarf.sh/syntasso/kratix-platform@sha256:d15be65d99bb1211fccbd3de60a06d64343d616b11d694b371a22f448c7a23ba
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kratix-platform-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: kratix
    app.kubernetes.io/instance: serving-cert
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: certificate
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-serving-cert
  namespace: kratix-platform-system
spec:
  dnsNames:
  - kratix-platform-webhook-service.kratix-platform-system.svc
  - kratix-platform-webhook-service.kratix-platform-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: kratix-platform-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/component: certificate
    app.kubernetes.io/created-by: kratix
    app.kubernetes.io/instance: selfsigned-issuer
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: issuer
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-selfsigned-issuer
  namespace: kratix-platform-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kratix-platform-system/kratix-platform-serving-cert
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: kratix
    app.kubernetes.io/instance: mutating-webhook-configuration
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: mutatingwebhookconfiguration
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: kratix-platform-webhook-service
      namespace: kratix-platform-system
      path: /mutate-platform-kratix-io-v1alpha1-promise
  failurePolicy: Fail
  name: mpromise.kb.io
  rules:
  - apiGroups:
    - platform.kratix.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - promises
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kratix-platform-system/kratix-platform-serving-cert
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: kratix
    app.kubernetes.io/instance: validating-webhook-configuration
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: validatingwebhookconfiguration
    app.kubernetes.io/part-of: kratix
  name: kratix-platform-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: kratix-platform-webhook-service
      namespace: kratix-platform-system
      path: /validate-platform-kratix-io-v1alpha1-promise
  failurePolicy: Fail
  name: vpromise.kb.io
  rules:
  - apiGroups:
    - platform.kratix.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - promises
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: kratix-platform-webhook-service
      namespace: kratix-platform-system
      path: /validate-platform-kratix-io-v1alpha1-promiserelease
  failurePolicy: Fail
  name: vpromiserelease.kb.io
  rules:
  - apiGroups:
    - platform.kratix.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - promisereleases
  sideEffects: None
